<?xml version="1.0"?>
<ruleset name="UpdraftPlus">
	<description>UpdraftPlus Core Coding Standards</description>
	<!-- Set Memory Limit -->
	<ini name="memory_limit" value="150M"/>
	<!-- Set Timezone -->
	<ini name="date.timezone" value="GMT"/>
	<!-- Set Tab Width -->
	<arg name="tab-width" value="4"/>
	<!-- PHP_CodeSniffer VariableAnalysis - detect unused variables and undefined -->
	<rule ref="VariableAnalysis"/>
<!-- Generic -->
	<rule ref="Generic"> 
		<!-- All PHP files MUST use the Unix LF (linefeed) line ending. -->
		<rule ref="Generic.Files.LineEndings">
			<properties>
				<property name="eolChar" value="\n"/>
			</properties>
		</rule>
		<rule ref="Generic.WhiteSpace.DisallowSpaceIndent"/>
		<!-- There MUST NOT be more than one statement per line. -->
		<rule ref="Generic.Formatting.DisallowMultipleStatements"/>
		<!-- Code MUST use an indent of 4 spaces, and MUST NOT use tabs for indenting. -->
		<rule ref="Generic.WhiteSpace.ScopeIndent">
			<properties>
				<property name="ignoreIndentationTokens" type="array" value="T_COMMENT,T_DOC_COMMENT_OPEN_TAG"/>
			</properties>
			<properties>
				<property name="indent" value="4"/>
				<property name="tabIndent" value="true"/>
			</properties>
		</rule>
		<!-- The PHP constants true, false, and null MUST be in lower case. -->
		<rule ref="Generic.PHP.LowerCaseConstant"/>
		<!-- PHP keywords MUST be in lower case. -->
		<rule ref="Generic.PHP.LowerCaseKeyword"/>
		<rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>
		<!-- The body of each structure MUST be enclosed by braces. This standardizes how the structures look, and reduces the likelihood of introducing errors as new lines get added to the body. -->
		<rule ref="Generic.ControlStructures.InlineControlStructure"/>
		<!-- Exclude from Generic -->
		<exclude name="Generic.Files.EndFileNoNewline.Found"/><!-- Excluding:  File must not end with a newline character -->
		<exclude name="Generic.WhiteSpace.DisallowTabIndent.TabsUsed"/><!-- Excluding:  Spaces must be used to indent lines; tabs are not allowed -->
		<exclude name="Generic.PHP.ForbiddenFunctions.Found"/><!-- Excluding:  The use of function create_function() is forbidden -->
		<exclude name="Generic.PHP.DeprecatedFunctions.Deprecated"/><!-- Excluding:  Function create_function() has been deprecated -->
		<exclude name="Generic.WhiteSpace.DisallowTabIndent.TabsUsed"/><!-- Excluding:  Spaces must be used to indent lines; tabs are not allowed -->
		<exclude name="Generic.ControlStructures.DisallowYodaConditions.Found"/><!-- Excluding:  Usage of Yoda conditions is not allowed; switch the expression order -->
		<exclude name="Generic.Functions.OpeningFunctionBraceBsdAllman.BraceOnSameLine"/><!-- Excluding:  Opening brace should be on a new line -->
		<exclude name="Generic.NamingConventions.CamelCapsFunctionName.NotCamelCaps"/><!-- Excluding: Function name is not in camel caps format -->
		<exclude name="Generic.Files.LineLength.TooLong"/><!-- Excluding: Line exceeds 120 characters -->
		<exclude name="Generic.Commenting.DocComment.NonParamGroup"/><!-- Excluding: Tag @return cannot be grouped with parameter tags in a doc comment -->
		<exclude name="Generic.CodeAnalysis.UnusedFunctionParameter.FoundAfterLastUsed"/><!-- Excluding: The method parameter is never used -->
		<exclude name="Generic.Arrays.DisallowLongArraySyntax.Found"/><!-- Excluding: Short array syntax must be used to define arrays -->
		<exclude name="Generic.PHP.RequireStrictTypes.MissingDeclaration"/><!-- Excluding: Missing required strict_types declaration -->
		<exclude name="Generic.PHP.ClosingPHPTag.NotFound"/><!-- Excluding: The PHP open tag does not have a corresponding PHP close tag -->
	</rule>
	<!-- PSR1 -->
	<rule ref="PSR1">
		<!-- Exclude from PSR1 -->
		<exclude name="PSR1.Files.SideEffects.FoundWithSymbols"/><!-- Excluding: A file should declare new symbols (classes, functions, constants, etc.) and cause no other side effects, or it should execute logic with side effects, but should not do both. The first    
   |         | symbol is defined on line 20 and the first side effect is on line 12 -->
	</rule>
	<!-- PSR2 -->
	<rule ref="PSR2">
		<!-- All PHP files MUST end with a single blank line. -->
		<!-- checked in Files/EndFileNewlineSniff -->
		<rule ref="PSR2.Files.EndFileNewline"/>
		<!-- When present, there MUST be one blank line after the namespace declaration. -->
		<!-- checked in Namespaces/NamespaceDeclarationSniff -->
		<rule ref="PSR2.Namespaces.NamespaceDeclaration"/>
		<!-- When present, all use declarations MUST go after the namespace declaration.
		There MUST be one use keyword per declaration.
		There MUST be one blank line after the use block. -->
		<!-- checked in Namespaces/UseDeclarationSniff -->
		<rule ref="PSR2.Namespaces.UseDeclaration"/>
		<!-- Visibility MUST be declared on all properties.
		The var keyword MUST NOT be used to declare a property.
		There MUST NOT be more than one property declared per statement.
		Property names SHOULD NOT be prefixed with a single underscore to indicate protected or private visibility. -->
		<!-- checked in Classes/PropertyDeclarationSniff -->
		<rule ref="PSR2.Classes.PropertyDeclaration"/> 
		<!-- Method names SHOULD NOT be prefixed with a single underscore to indicate protected or private visibility. -->
		<!-- checked in Methods/MethodDeclarationSniff -->
		<rule ref="PSR2.Methods.MethodDeclaration"/>
		<!-- When making a method or function call, there MUST NOT be a space between the method or function name and the opening parenthesis, there MUST NOT be a space after the opening parenthesis, and there MUST NOT be a space before the closing parenthesis. In the argument list, there MUST NOT be a space before each comma, and there MUST be one space after each comma.
		Argument lists MAY be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list MUST be on the next line, and there MUST be only one argument per line. -->
		<rule ref="PSR2.Methods.FunctionCallSignature.SpaceAfterCloseBracket">
			<severity>0</severity>
		</rule>
		<!-- The keyword elseif SHOULD be used instead of else if so that all control keywords look like single words. -->
		<!-- checked in ControlStructures/ElseIfDeclarationSniff -->
		<rule ref="PSR2.ControlStructures.ElseIfDeclaration"/> 
		<!-- Exclude from PSR2 -->
	</rule>
	<!-- PEAR -->
	<rule ref="PEAR">
		<!-- Method arguments with default values MUST go at the end of the argument list. -->
		<rule ref="PEAR.Functions.ValidDefaultValue"/>
		<!-- Exclude from PEAR -->
		<exclude name="PEAR.Functions.FunctionDeclaration.BraceOnSameLine"/><!-- Excluding:  Opening brace should be on a new line -->
		<exclude name="PEAR.NamingConventions.ValidFunctionName.FunctionNameInvalid"/><!-- Excluding: Function name is invalid -->
		<exclude name="PEAR.NamingConventions.ValidFunctionName.FunctionNoCapital"/><!-- Excluding: Function name is prefixed with a package name but does not begin with a capital letter -->
	</rule>
	<!-- Squiz -->
    <rule ref="Squiz">
		<!-- There MUST NOT be trailing whitespace at the end of non-blank lines. -->
		<rule ref="Squiz.WhiteSpace.SuperfluousWhitespace">
			<properties>
				<property name="ignoreBlankLines" value="true"/>
			</properties>
		</rule>
		<rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.StartFile">
			<severity>0</severity>
		</rule>
		<rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EndFile">
			<severity>0</severity>
		</rule>
		<rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines">
			<severity>0</severity>
		</rule>
		<!-- Visibility MUST be declared on all methods. -->
		<rule ref="Squiz.Scope.MethodScope"/>
		<rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing"/>
		<!-- Method names MUST NOT be declared with a space after the method name. The opening brace MUST go on its own line, and the closing brace MUST go on the next line following the body. There MUST NOT be a space after the opening parenthesis, and there MUST NOT be a space before the closing parenthesis. -->
		<!-- checked in Methods/FunctionClosingBraceSniff -->
		<rule ref="Squiz.Functions.FunctionDeclaration"/>
		<rule ref="Squiz.Functions.LowercaseFunctionKeywords"/>
		<!-- In the argument list, there MUST NOT be a space before each comma, and there MUST be one space after each comma. -->
		<rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
			<properties>
				<property name="equalsSpacing" value="1"/>
			</properties>
		</rule>
		<rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpacingAfterHint">
			<severity>0</severity>
		</rule>
		<!-- Argument lists MAY be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list MUST be on the next line, and there MUST be only one argument per line. When the argument list is split across multiple lines, the closing parenthesis and opening brace MUST be placed together on their own line with one space between them. -->
		<rule ref="Squiz.Functions.MultiLineFunctionDeclaration"/>
		<!-- The general style rules for control structures are as follows:
		There MUST be one space after the control structure keyword
		There MUST NOT be a space after the opening parenthesis
		There MUST NOT be a space before the closing parenthesis
		There MUST be one space between the closing parenthesis and the opening brace
		The structure body MUST be indented once
		The closing brace MUST be on the next line after the body -->
		<rule ref="Squiz.ControlStructures.ControlSignature"/>
		<rule ref="Squiz.WhiteSpace.ControlStructureSpacing"/>
		<rule ref="Squiz.WhiteSpace.ControlStructureSpacing.SpacingAfterOpenBrace">
			<severity>0</severity>
		</rule>
		<rule ref="Squiz.WhiteSpace.ControlStructureSpacing.SpaceBeforeCloseBrace">
			<severity>0</severity>
		</rule>
		<rule ref="Squiz.WhiteSpace.ControlStructureSpacing.LineAfterClose">
			<severity>0</severity>
		</rule>
		<rule ref="Squiz.WhiteSpace.ControlStructureSpacing.NoLineAfterClose">
			<severity>0</severity>
		</rule>
		<rule ref="Squiz.WhiteSpace.ScopeClosingBrace"/>
		<rule ref="Squiz.ControlStructures.ForEachLoopDeclaration"/>
		<rule ref="Squiz.ControlStructures.ForLoopDeclaration"/>
		<rule ref="Squiz.ControlStructures.LowercaseDeclaration"/>
		<rule ref="Squiz.PHP.DisallowSizeFunctionsInLoops"/>
		<!-- Array Structures -->
		<rule ref="Squiz.Arrays.ArrayBracketSpacing"/> 
		<rule ref="Squiz.Arrays.ArrayDeclaration"/>
    	<!-- Exclude from Squiz -->
		<exclude name="Squiz.WhiteSpace.FunctionClosingBraceSpace.SpacingBeforeClose"/><!-- Excluding:  Expected 1 blank line before closing function brace -->
		<exclude name="Squiz.Commenting.ClosingDeclarationComment.Missing"/><!-- Excluding:  Expected //end podtrac_analytics_refresh_rss_cache() -->
		<exclude name="Squiz.Commenting.InlineComment.InvalidEndChar"/><!-- Excluding:  Inline comments must end in full-stops, exclamation marks, or question marks -->
		<exclude name="Squiz.NamingConventions.ValidVariableName.NotCamelCaps"/><!-- Excluding:  Variable "rss_cache_refresh" is not in valid camel caps format -->
		<exclude name="Squiz.Functions.MultiLineFunctionDeclaration.BraceOnSameLine"/><!-- Excluding:  Opening brace should be on a new line -->
		<exclude name="Squiz.WhiteSpace.FunctionSpacing.Before"/><!-- Excluding:  Expected 2 blank lines before function -->
		<exclude name="Squiz.NamingConventions.ValidFunctionName.NotCamelCaps"/><!-- Excluding:  Function name is not in camel caps format -->
		<exclude name="Squiz.Functions.GlobalFunction.Found"/><!-- Excluding:  Consider putting global function in a static class -->
		<exclude name="Squiz.WhiteSpace.FunctionSpacing.After"/><!-- Excluding:  Expected 2 blank lines after function -->
		<exclude name="Squiz.Commenting.FunctionComment.ParamCommentFullStop"/><!-- Excluding: Parameter comment must end with a full stop -->
	</rule>
	<!-- Only Allow these Wordpress Rules -->
	<!-- Yoda rule: When doing logical comparisons, always put the variable on the right side,
		constants or literals on the left. Yoda conditions for <, >, <= or >= are significantly more difficult to read
		and are best avoided.-->
	<rule ref="WordPress.PHP.YodaConditions"/>
	<!-- Check enqueue and register styles and scripts to have version and in_footer parameters explicitly set. -->
	<rule ref="WordPress.WP.EnqueuedResourceParameters"/>
</ruleset>